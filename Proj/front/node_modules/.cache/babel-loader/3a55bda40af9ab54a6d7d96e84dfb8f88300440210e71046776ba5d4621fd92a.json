{"ast":null,"code":"import { operationApi } from '@/api/operation';\nimport { goodsApi } from '@/api/goods';\nexport default {\n  name: \"OperationManage\",\n  data() {\n    return {\n      tableData: [],\n      storageData: [],\n      goodstypeData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      currentStock: 0,\n      // 当前库存数量\n      checkingStock: false,\n      // 检查库存状态\n      // 商品名自动补全相关\n      goodsNameSuggestions: [],\n      // 商品名建议列表\n      showSuggestions: false,\n      // 是否显示建议\n      suggestionLoading: false,\n      // 建议加载状态\n      // 商品类型智能提示相关\n      filteredGoodstypeData: [],\n      // 过滤后的商品类型数据\n      goodsTypeMapping: {},\n      // 商品名称与类型的映射关系\n      // 查询条件\n      no: '',\n      storage: '',\n      good: '',\n      goodstype: '',\n      type: '',\n      // 操作类型选项\n      typeOptions: [{\n        value: '0',\n        label: '入库操作'\n      }, {\n        value: '1',\n        label: '出库操作'\n      }],\n      centerDialogVisible: false,\n      form: {\n        id: '',\n        no: '',\n        storage: '',\n        good: '',\n        goodstype: '',\n        type: '',\n        count: ''\n      },\n      rules: {\n        no: [{\n          required: true,\n          message: '请输入订单号',\n          trigger: 'blur'\n        }],\n        storage: [{\n          required: true,\n          message: '请选择仓库',\n          trigger: 'change'\n        }],\n        good: [{\n          required: true,\n          message: '请输入商品名',\n          trigger: 'blur'\n        }],\n        goodstype: [{\n          required: true,\n          message: '请选择商品类型',\n          trigger: 'change'\n        }],\n        type: [{\n          required: true,\n          message: '请选择操作类型',\n          trigger: 'change'\n        }],\n        count: [{\n          required: true,\n          message: '请输入操作数量',\n          trigger: 'blur'\n        }, {\n          pattern: /^([1-9][0-9]*){1,4}$/,\n          message: '数量必须为正整数',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    handleSizeChange(val) {\n      console.log(`每页 ${val} 条`);\n      this.pageNum = 1;\n      this.pageSize = val;\n      this.loadPost();\n    },\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`);\n      this.pageNum = val;\n      this.loadPost();\n    },\n    // 查询操作记录\n    loadPost() {\n      operationApi.listPage({\n        pageSize: this.pageSize,\n        pageNum: this.pageNum,\n        param: {\n          no: this.no,\n          storage: this.storage + '',\n          good: this.good,\n          goodstype: this.goodstype + '',\n          type: this.type\n        }\n      }).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.tableData = res.data;\n          this.total = res.total;\n        } else {\n          alert('获取数据失败');\n        }\n      });\n    },\n    resetParam() {\n      this.no = '';\n      this.storage = '';\n      this.good = '';\n      this.goodstype = '';\n      this.type = '';\n    },\n    addData() {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.resetForm();\n      });\n      this.form.id = '';\n    },\n    saveData() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          // 如果是出库操作，检查库存是否足够\n          if (this.form.type === '1') {\n            const requestCount = parseInt(this.form.count);\n            if (requestCount > this.currentStock) {\n              this.$message({\n                message: `库存不足！当前库存：${this.currentStock}，请求出库：${requestCount}`,\n                type: 'error'\n              });\n              return false;\n            }\n          }\n          if (this.form.id) {\n            this.doMod();\n          } else {\n            this.doSave();\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    mod(row) {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.form.id = row.id;\n        this.form.no = row.no;\n        this.form.storage = row.storage;\n        this.form.good = row.good;\n        this.form.goodstype = row.goodstype;\n        this.form.type = row.type + '';\n        this.form.count = row.count;\n        // 编辑时也检查库存\n        this.onGoodOrStorageChange();\n      });\n    },\n    doMod() {\n      operationApi.update(this.form).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '修改成功！',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: '修改失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    doSave() {\n      operationApi.save(this.form).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '添加成功！',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: '添加失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    del(id) {\n      operationApi.delete(id).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '删除成功！',\n            type: 'success'\n          });\n          this.loadPost();\n        } else {\n          this.$message({\n            message: '删除失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n    },\n    // 加载仓库列表\n    loadStorage() {\n      operationApi.getStorageList().then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.storageData = res.data;\n        } else {\n          alert('获取仓库数据失败');\n        }\n      });\n    },\n    // 加载商品类型列表\n    loadGoodstype() {\n      operationApi.getGoodsTypeList().then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.goodstypeData = res.data;\n          // 初始化过滤数据\n          this.filteredGoodstypeData = [...this.goodstypeData];\n        } else {\n          alert('获取商品类型数据失败');\n        }\n      });\n    },\n    // 格式化仓库名称\n    formatStorage(row) {\n      let t = this.storageData.find(item => {\n        return item.id == row.storage;\n      });\n      return t && t.name;\n    },\n    // 格式化商品类型名称\n    formatGoodsType(row) {\n      let t = this.goodstypeData.find(item => {\n        return item.id == row.goodstype;\n      });\n      return t && t.name;\n    },\n    // 格式化操作类型\n    formatType(row) {\n      return row.type == '0' ? '入库操作' : '出库操作';\n    },\n    // 检查当前库存\n    checkCurrentStock() {\n      if (!this.form.good || !this.form.storage) {\n        this.currentStock = 0;\n        return;\n      }\n      this.checkingStock = true;\n\n      // 获取该商品在该仓库的所有操作记录\n      operationApi.listPage({\n        pageSize: 1000,\n        pageNum: 1,\n        param: {\n          good: this.form.good,\n          storage: this.form.storage + ''\n        }\n      }).then(res => {\n        if (res.code == 200) {\n          const operations = res.data || [];\n          let stock = 0;\n\n          // 计算当前库存：入库 - 出库\n          operations.forEach(operation => {\n            if (operation.type === '0') {\n              // 入库操作\n              stock += operation.count;\n            } else if (operation.type === '1') {\n              // 出库操作\n              stock -= operation.count;\n            }\n          });\n          this.currentStock = stock;\n          console.log(`商品 ${this.form.good} 在仓库 ${this.form.storage} 的当前库存: ${stock}`);\n        } else {\n          this.currentStock = 0;\n        }\n        this.checkingStock = false;\n      }).catch(error => {\n        console.error('检查库存失败:', error);\n        this.currentStock = 0;\n        this.checkingStock = false;\n      });\n    },\n    // 监听商品和仓库变化\n    onGoodOrStorageChange() {\n      this.currentStock = 0;\n      if (this.form.good && this.form.storage) {\n        this.checkCurrentStock();\n      }\n    },\n    // 获取仓库名称\n    getStorageName(storageId) {\n      const storage = this.storageData.find(item => item.id == storageId);\n      return storage ? storage.name : '未知仓库';\n    },\n    // 获取商品名称建议\n    getGoodsNameSuggestions(keyword) {\n      if (!keyword || keyword.length < 1) {\n        this.goodsNameSuggestions = [];\n        this.showSuggestions = false;\n        return;\n      }\n      this.suggestionLoading = true;\n\n      // 模拟API调用，实际应该调用后端接口\n      // 这里先用本地数据模拟\n      setTimeout(() => {\n        // 模拟从数据库获取的商品名称\n        const allGoodsNames = ['长裙', '短裙', '裙子', '连衣裙', '半身裙', '牛仔裤', '休闲裤', '运动裤', '西裤', 'T恤', '衬衫', '毛衣', '外套', '羽绒服', '运动鞋', '皮鞋', '凉鞋', '高跟鞋'];\n\n        // 过滤包含关键词的商品名称\n        this.goodsNameSuggestions = allGoodsNames.filter(name => name.toLowerCase().includes(keyword.toLowerCase()));\n        this.showSuggestions = this.goodsNameSuggestions.length > 0;\n        this.suggestionLoading = false;\n      }, 300);\n    },\n    // 选择建议的商品名\n    selectGoodsName(name) {\n      this.form.good = name;\n      this.showSuggestions = false;\n      this.goodsNameSuggestions = [];\n      // 选择商品后检查库存和过滤类型\n      this.onGoodOrStorageChange();\n      this.onGoodsNameChange();\n    },\n    // 隐藏建议列表\n    hideSuggestions() {\n      setTimeout(() => {\n        this.showSuggestions = false;\n      }, 200);\n    },\n    // 商品名输入事件\n    onGoodInput(value) {\n      this.onGoodOrStorageChange();\n      this.getGoodsNameSuggestions(value);\n      this.onGoodsNameChange();\n    },\n    // 商品名获得焦点事件\n    onGoodFocus() {\n      if (this.form.good) {\n        this.getGoodsNameSuggestions(this.form.good);\n      }\n    },\n    // 初始化商品类型映射关系\n    initGoodsTypeMapping() {\n      this.goodsTypeMapping = {\n        // 裙装类\n        '长裙': '裙装',\n        '短裙': '裙装',\n        '裙子': '裙装',\n        '连衣裙': '裙装',\n        '半身裙': '裙装',\n        'A字裙': '裙装',\n        '包臀裙': '裙装',\n        '百褶裙': '裙装',\n        // 裤装类\n        '牛仔裤': '裤装',\n        '休闲裤': '裤装',\n        '运动裤': '裤装',\n        '西裤': '裤装',\n        '短裤': '裤装',\n        '长裤': '裤装',\n        '工装裤': '裤装',\n        '哈伦裤': '裤装',\n        // 上衣类\n        'T恤': '上衣',\n        '衬衫': '上衣',\n        '毛衣': '上衣',\n        '外套': '上衣',\n        '羽绒服': '上衣',\n        '卫衣': '上衣',\n        '背心': '上衣',\n        '吊带': '上衣',\n        '马甲': '上衣',\n        '风衣': '上衣',\n        '夹克': '上衣',\n        // 鞋类\n        '运动鞋': '鞋类',\n        '皮鞋': '鞋类',\n        '凉鞋': '鞋类',\n        '高跟鞋': '鞋类',\n        '平底鞋': '鞋类',\n        '靴子': '鞋类',\n        '帆布鞋': '鞋类',\n        '板鞋': '鞋类',\n        // 配饰类\n        '帽子': '配饰',\n        '围巾': '配饰',\n        '手套': '配饰',\n        '腰带': '配饰',\n        '包包': '配饰',\n        '手表': '配饰',\n        '项链': '配饰',\n        '耳环': '配饰'\n      };\n    },\n    // 根据商品名称过滤商品类型\n    filterGoodsTypeByGoodsName() {\n      if (!this.form.good) {\n        this.filteredGoodstypeData = [...this.goodstypeData];\n        return;\n      }\n      const suggestedType = this.goodsTypeMapping[this.form.good];\n      if (suggestedType) {\n        // 将建议的类型放在第一位\n        this.filteredGoodstypeData = this.goodstypeData.sort((a, b) => {\n          if (a.name === suggestedType) return -1;\n          if (b.name === suggestedType) return 1;\n          return 0;\n        });\n      } else {\n        this.filteredGoodstypeData = [...this.goodstypeData];\n      }\n    },\n    // 商品名称变化时重新过滤类型\n    onGoodsNameChange() {\n      this.filterGoodsTypeByGoodsName();\n    },\n    // 判断是否为推荐类型\n    isSuggestedType(typeName) {\n      if (!this.form.good) return false;\n      const suggestedType = this.goodsTypeMapping[this.form.good];\n      return suggestedType === typeName;\n    }\n  },\n  beforeMount() {\n    this.loadStorage();\n    this.loadGoodstype();\n    this.loadPost();\n    this.initGoodsTypeMapping();\n  }\n};","map":{"version":3,"names":["operationApi","goodsApi","name","data","tableData","storageData","goodstypeData","pageNum","pageSize","total","currentStock","checkingStock","goodsNameSuggestions","showSuggestions","suggestionLoading","filteredGoodstypeData","goodsTypeMapping","no","storage","good","goodstype","type","typeOptions","value","label","centerDialogVisible","form","id","count","rules","required","message","trigger","pattern","methods","handleSizeChange","val","console","log","loadPost","handleCurrentChange","listPage","param","then","res","code","alert","resetParam","addData","$nextTick","resetForm","saveData","$refs","validate","valid","requestCount","parseInt","$message","doMod","doSave","mod","row","onGoodOrStorageChange","update","save","del","delete","resetFields","loadStorage","getStorageList","loadGoodstype","getGoodsTypeList","formatStorage","t","find","item","formatGoodsType","formatType","checkCurrentStock","operations","stock","forEach","operation","catch","error","getStorageName","storageId","getGoodsNameSuggestions","keyword","length","setTimeout","allGoodsNames","filter","toLowerCase","includes","selectGoodsName","onGoodsNameChange","hideSuggestions","onGoodInput","onGoodFocus","initGoodsTypeMapping","filterGoodsTypeByGoodsName","suggestedType","sort","a","b","isSuggestedType","typeName","beforeMount"],"sources":["src/components/operation/OperationManage.vue"],"sourcesContent":["<script>\r\nimport { operationApi } from '@/api/operation'\r\nimport { goodsApi } from '@/api/goods'\r\n\r\nexport default {\r\n  name: \"OperationManage\",\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      storageData: [],\r\n      goodstypeData: [],\r\n      pageNum: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n      currentStock: 0, // 当前库存数量\r\n      checkingStock: false, // 检查库存状态\r\n      // 商品名自动补全相关\r\n      goodsNameSuggestions: [], // 商品名建议列表\r\n      showSuggestions: false, // 是否显示建议\r\n      suggestionLoading: false, // 建议加载状态\r\n      // 商品类型智能提示相关\r\n      filteredGoodstypeData: [], // 过滤后的商品类型数据\r\n      goodsTypeMapping: {}, // 商品名称与类型的映射关系\r\n      // 查询条件\r\n      no: '',\r\n      storage: '',\r\n      good: '',\r\n      goodstype: '',\r\n      type: '',\r\n      // 操作类型选项\r\n      typeOptions: [\r\n        { value: '0', label: '入库操作' },\r\n        { value: '1', label: '出库操作' }\r\n      ],\r\n      centerDialogVisible: false,\r\n      form: {\r\n        id: '',\r\n        no: '',\r\n        storage: '',\r\n        good: '',\r\n        goodstype: '',\r\n        type: '',\r\n        count: ''\r\n      },\r\n      rules: {\r\n        no: [\r\n          { required: true, message: '请输入订单号', trigger: 'blur' }\r\n        ],\r\n        storage: [\r\n          { required: true, message: '请选择仓库', trigger: 'change' }\r\n        ],\r\n        good: [\r\n          { required: true, message: '请输入商品名', trigger: 'blur' }\r\n        ],\r\n        goodstype: [\r\n          { required: true, message: '请选择商品类型', trigger: 'change' }\r\n        ],\r\n        type: [\r\n          { required: true, message: '请选择操作类型', trigger: 'change' }\r\n        ],\r\n        count: [\r\n          { required: true, message: '请输入操作数量', trigger: 'blur' },\r\n          { pattern: /^([1-9][0-9]*){1,4}$/, message: '数量必须为正整数', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleSizeChange(val) {\r\n      console.log(`每页 ${val} 条`);\r\n      this.pageNum = 1\r\n      this.pageSize = val\r\n      this.loadPost()\r\n    },\r\n    handleCurrentChange(val) {\r\n      console.log(`当前页: ${val}`);\r\n      this.pageNum = val\r\n      this.loadPost()\r\n    },\r\n    // 查询操作记录\r\n    loadPost() {\r\n      operationApi.listPage({\r\n        pageSize: this.pageSize,\r\n        pageNum: this.pageNum,\r\n        param: {\r\n          no: this.no,\r\n          storage: this.storage + '',\r\n          good: this.good,\r\n          goodstype: this.goodstype + '',\r\n          type: this.type\r\n        }\r\n      }).then(res => {\r\n        console.log(res)\r\n        if (res.code == 200) {\r\n          this.tableData = res.data\r\n          this.total = res.total\r\n        } else {\r\n          alert('获取数据失败')\r\n        }\r\n      })\r\n    },\r\n    resetParam() {\r\n      this.no = ''\r\n      this.storage = ''\r\n      this.good = ''\r\n      this.goodstype = ''\r\n      this.type = ''\r\n    },\r\n    addData() {\r\n      this.centerDialogVisible = true\r\n      this.$nextTick(() => {\r\n        this.resetForm()\r\n      })\r\n      this.form.id = ''\r\n    },\r\n    saveData() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          // 如果是出库操作，检查库存是否足够\r\n          if (this.form.type === '1') {\r\n            const requestCount = parseInt(this.form.count);\r\n            if (requestCount > this.currentStock) {\r\n              this.$message({\r\n                message: `库存不足！当前库存：${this.currentStock}，请求出库：${requestCount}`,\r\n                type: 'error'\r\n              });\r\n              return false;\r\n            }\r\n          }\r\n          \r\n          if (this.form.id) {\r\n            this.doMod();\r\n          } else {\r\n            this.doSave();\r\n          }\r\n        } else {\r\n          console.log('error submit!!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    mod(row) {\r\n      this.centerDialogVisible = true\r\n      this.$nextTick(() => {\r\n        this.form.id = row.id\r\n        this.form.no = row.no\r\n        this.form.storage = row.storage\r\n        this.form.good = row.good\r\n        this.form.goodstype = row.goodstype\r\n        this.form.type = row.type + ''\r\n        this.form.count = row.count\r\n        // 编辑时也检查库存\r\n        this.onGoodOrStorageChange();\r\n      })\r\n    },\r\n    doMod() {\r\n      operationApi.update(this.form).then(res => {\r\n        if (res.code == 200) {\r\n          this.$message({\r\n            message: '修改成功！',\r\n            type: 'success'\r\n          });\r\n          this.centerDialogVisible = false\r\n          this.loadPost()\r\n          this.resetForm()\r\n        } else {\r\n          this.$message({\r\n            message: '修改失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    doSave() {\r\n      operationApi.save(this.form).then(res => {\r\n        if (res.code == 200) {\r\n          this.$message({\r\n            message: '添加成功！',\r\n            type: 'success'\r\n          });\r\n          this.centerDialogVisible = false\r\n          this.loadPost()\r\n          this.resetForm()\r\n        } else {\r\n          this.$message({\r\n            message: '添加失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    del(id) {\r\n      operationApi.delete(id).then(res => {\r\n        if (res.code == 200) {\r\n          this.$message({\r\n            message: '删除成功！',\r\n            type: 'success'\r\n          });\r\n          this.loadPost()\r\n        } else {\r\n          this.$message({\r\n            message: '删除失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.resetFields();\r\n    },\r\n    // 加载仓库列表\r\n    loadStorage() {\r\n      operationApi.getStorageList().then(res => {\r\n        console.log(res)\r\n        if (res.code == 200) {\r\n          this.storageData = res.data\r\n        } else {\r\n          alert('获取仓库数据失败')\r\n        }\r\n      })\r\n    },\r\n    // 加载商品类型列表\r\n    loadGoodstype() {\r\n      operationApi.getGoodsTypeList().then(res => {\r\n        console.log(res)\r\n        if (res.code == 200) {\r\n          this.goodstypeData = res.data\r\n          // 初始化过滤数据\r\n          this.filteredGoodstypeData = [...this.goodstypeData]\r\n        } else {\r\n          alert('获取商品类型数据失败')\r\n        }\r\n      })\r\n    },\r\n    // 格式化仓库名称\r\n    formatStorage(row) {\r\n      let t = this.storageData.find(item => {\r\n        return item.id == row.storage\r\n      })\r\n      return t && t.name\r\n    },\r\n    // 格式化商品类型名称\r\n    formatGoodsType(row) {\r\n      let t = this.goodstypeData.find(item => {\r\n        return item.id == row.goodstype\r\n      })\r\n      return t && t.name\r\n    },\r\n    // 格式化操作类型\r\n    formatType(row) {\r\n      return row.type == '0' ? '入库操作' : '出库操作'\r\n    },\r\n    // 检查当前库存\r\n    checkCurrentStock() {\r\n      if (!this.form.good || !this.form.storage) {\r\n        this.currentStock = 0;\r\n        return;\r\n      }\r\n      \r\n      this.checkingStock = true;\r\n      \r\n      // 获取该商品在该仓库的所有操作记录\r\n      operationApi.listPage({\r\n        pageSize: 1000,\r\n        pageNum: 1,\r\n        param: {\r\n          good: this.form.good,\r\n          storage: this.form.storage + ''\r\n        }\r\n      }).then(res => {\r\n        if (res.code == 200) {\r\n          const operations = res.data || [];\r\n          let stock = 0;\r\n          \r\n          // 计算当前库存：入库 - 出库\r\n          operations.forEach(operation => {\r\n            if (operation.type === '0') {\r\n              // 入库操作\r\n              stock += operation.count;\r\n            } else if (operation.type === '1') {\r\n              // 出库操作\r\n              stock -= operation.count;\r\n            }\r\n          });\r\n          \r\n          this.currentStock = stock;\r\n          console.log(`商品 ${this.form.good} 在仓库 ${this.form.storage} 的当前库存: ${stock}`);\r\n        } else {\r\n          this.currentStock = 0;\r\n        }\r\n        this.checkingStock = false;\r\n      }).catch(error => {\r\n        console.error('检查库存失败:', error);\r\n        this.currentStock = 0;\r\n        this.checkingStock = false;\r\n      });\r\n    },\r\n    // 监听商品和仓库变化\r\n    onGoodOrStorageChange() {\r\n      this.currentStock = 0;\r\n      if (this.form.good && this.form.storage) {\r\n        this.checkCurrentStock();\r\n      }\r\n    },\r\n    // 获取仓库名称\r\n    getStorageName(storageId) {\r\n      const storage = this.storageData.find(item => item.id == storageId);\r\n      return storage ? storage.name : '未知仓库';\r\n    },\r\n    // 获取商品名称建议\r\n    getGoodsNameSuggestions(keyword) {\r\n      if (!keyword || keyword.length < 1) {\r\n        this.goodsNameSuggestions = [];\r\n        this.showSuggestions = false;\r\n        return;\r\n      }\r\n      \r\n      this.suggestionLoading = true;\r\n      \r\n      // 模拟API调用，实际应该调用后端接口\r\n      // 这里先用本地数据模拟\r\n      setTimeout(() => {\r\n        // 模拟从数据库获取的商品名称\r\n        const allGoodsNames = [\r\n          '长裙', '短裙', '裙子', '连衣裙', '半身裙',\r\n          '牛仔裤', '休闲裤', '运动裤', '西裤',\r\n          'T恤', '衬衫', '毛衣', '外套', '羽绒服',\r\n          '运动鞋', '皮鞋', '凉鞋', '高跟鞋'\r\n        ];\r\n        \r\n        // 过滤包含关键词的商品名称\r\n        this.goodsNameSuggestions = allGoodsNames.filter(name => \r\n          name.toLowerCase().includes(keyword.toLowerCase())\r\n        );\r\n        \r\n        this.showSuggestions = this.goodsNameSuggestions.length > 0;\r\n        this.suggestionLoading = false;\r\n      }, 300);\r\n    },\r\n    // 选择建议的商品名\r\n    selectGoodsName(name) {\r\n      this.form.good = name;\r\n      this.showSuggestions = false;\r\n      this.goodsNameSuggestions = [];\r\n      // 选择商品后检查库存和过滤类型\r\n      this.onGoodOrStorageChange();\r\n      this.onGoodsNameChange();\r\n    },\r\n    // 隐藏建议列表\r\n    hideSuggestions() {\r\n      setTimeout(() => {\r\n        this.showSuggestions = false;\r\n      }, 200);\r\n    },\r\n    // 商品名输入事件\r\n    onGoodInput(value) {\r\n      this.onGoodOrStorageChange();\r\n      this.getGoodsNameSuggestions(value);\r\n      this.onGoodsNameChange();\r\n    },\r\n    // 商品名获得焦点事件\r\n    onGoodFocus() {\r\n      if (this.form.good) {\r\n        this.getGoodsNameSuggestions(this.form.good);\r\n      }\r\n    },\r\n    // 初始化商品类型映射关系\r\n    initGoodsTypeMapping() {\r\n      this.goodsTypeMapping = {\r\n        // 裙装类\r\n        '长裙': '裙装',\r\n        '短裙': '裙装', \r\n        '裙子': '裙装',\r\n        '连衣裙': '裙装',\r\n        '半身裙': '裙装',\r\n        'A字裙': '裙装',\r\n        '包臀裙': '裙装',\r\n        '百褶裙': '裙装',\r\n        \r\n        // 裤装类\r\n        '牛仔裤': '裤装',\r\n        '休闲裤': '裤装',\r\n        '运动裤': '裤装',\r\n        '西裤': '裤装',\r\n        '短裤': '裤装',\r\n        '长裤': '裤装',\r\n        '工装裤': '裤装',\r\n        '哈伦裤': '裤装',\r\n        \r\n        // 上衣类\r\n        'T恤': '上衣',\r\n        '衬衫': '上衣',\r\n        '毛衣': '上衣',\r\n        '外套': '上衣',\r\n        '羽绒服': '上衣',\r\n        '卫衣': '上衣',\r\n        '背心': '上衣',\r\n        '吊带': '上衣',\r\n        '马甲': '上衣',\r\n        '风衣': '上衣',\r\n        '夹克': '上衣',\r\n        \r\n        // 鞋类\r\n        '运动鞋': '鞋类',\r\n        '皮鞋': '鞋类',\r\n        '凉鞋': '鞋类',\r\n        '高跟鞋': '鞋类',\r\n        '平底鞋': '鞋类',\r\n        '靴子': '鞋类',\r\n        '帆布鞋': '鞋类',\r\n        '板鞋': '鞋类',\r\n        \r\n        // 配饰类\r\n        '帽子': '配饰',\r\n        '围巾': '配饰',\r\n        '手套': '配饰',\r\n        '腰带': '配饰',\r\n        '包包': '配饰',\r\n        '手表': '配饰',\r\n        '项链': '配饰',\r\n        '耳环': '配饰'\r\n      };\r\n    },\r\n    // 根据商品名称过滤商品类型\r\n    filterGoodsTypeByGoodsName() {\r\n      if (!this.form.good) {\r\n        this.filteredGoodstypeData = [...this.goodstypeData];\r\n        return;\r\n      }\r\n      \r\n      const suggestedType = this.goodsTypeMapping[this.form.good];\r\n      if (suggestedType) {\r\n        // 将建议的类型放在第一位\r\n        this.filteredGoodstypeData = this.goodstypeData.sort((a, b) => {\r\n          if (a.name === suggestedType) return -1;\r\n          if (b.name === suggestedType) return 1;\r\n          return 0;\r\n        });\r\n      } else {\r\n        this.filteredGoodstypeData = [...this.goodstypeData];\r\n      }\r\n    },\r\n    // 商品名称变化时重新过滤类型\r\n    onGoodsNameChange() {\r\n      this.filterGoodsTypeByGoodsName();\r\n    },\r\n    // 判断是否为推荐类型\r\n    isSuggestedType(typeName) {\r\n      if (!this.form.good) return false;\r\n      const suggestedType = this.goodsTypeMapping[this.form.good];\r\n      return suggestedType === typeName;\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.loadStorage()\r\n    this.loadGoodstype()\r\n    this.loadPost()\r\n    this.initGoodsTypeMapping()\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div style=\"text-align: center; margin-bottom: 5px\">\r\n      <el-input v-model=\"no\"\r\n                placeholder=\"请输入订单号\"\r\n                suffix-icon=\"el-icon-search\"\r\n                style=\"width: 150px\"\r\n                @keyup.enter.native=\"loadPost\"></el-input>\r\n      <el-select v-model=\"storage\" placeholder=\"请选择仓库\" style=\"margin-left: 10px; width: 120px\">\r\n        <el-option\r\n            v-for=\"item in storageData\"\r\n            :key=\"item.id\"\r\n            :label=\"item.name\"\r\n            :value=\"item.id\">\r\n        </el-option>\r\n      </el-select>\r\n      <el-input v-model=\"good\"\r\n                placeholder=\"请输入商品名\"\r\n                style=\"margin-left: 10px; width: 150px\"\r\n                @keyup.enter.native=\"loadPost\"></el-input>\r\n      <el-select v-model=\"goodstype\" placeholder=\"请选择类型\" style=\"margin-left: 10px; width: 120px\">\r\n        <el-option\r\n            v-for=\"item in goodstypeData\"\r\n            :key=\"item.id\"\r\n            :label=\"item.name\"\r\n            :value=\"item.id\">\r\n        </el-option>\r\n      </el-select>\r\n      <el-select v-model=\"type\" placeholder=\"请选择操作类型\" style=\"margin-left: 10px; width: 120px\">\r\n        <el-option\r\n            v-for=\"item in typeOptions\"\r\n            :key=\"item.value\"\r\n            :label=\"item.label\"\r\n            :value=\"item.value\">\r\n        </el-option>\r\n      </el-select>\r\n      <el-button style=\"margin-left: 10px\" @click=\"loadPost\">查询</el-button>\r\n      <el-button @click=\"resetParam\">重置</el-button>\r\n      <el-button style=\"margin-left: 10px\" @click=\"addData\">新增</el-button>\r\n    </div>\r\n    <el-table :data=\"tableData\"\r\n              :header-cell-style=\"{background:'rgb(186,204,238)',color:'rgba(0,0,0,0.6)'}\"\r\n              border\r\n              style=\"width: 100%\"\r\n    >\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"80\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"no\" label=\"订单号\" min-width=\"150\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"storage\" label=\"仓库\" min-width=\"120\" :formatter=\"formatStorage\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"good\" label=\"商品\" min-width=\"150\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"goodstype\" label=\"商品类型\" min-width=\"120\" :formatter=\"formatGoodsType\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"type\" label=\"操作类型\" min-width=\"120\" :formatter=\"formatType\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag\r\n              :type=\"scope.row.type === '0' ? 'success' : 'warning'\"\r\n              disable-transitions>{{formatType(scope.row)}}</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"count\" label=\"操作数量\" min-width=\"120\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"operate\" label=\"操作\" width=\"200\" fixed=\"right\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"small\" type=\"primary\" @click=\"mod(scope.row)\" style=\"margin-left: 25px\">编辑</el-button>\r\n          <el-popconfirm\r\n              title=\"您确定删除该条数据吗？\"\r\n              @confirm=\"del(scope.row.id)\"\r\n              style=\"margin-left: 10px\"\r\n          >\r\n            <el-button slot=\"reference\" size=\"small\" type=\"danger\" style=\"margin-left: 10px\">删除</el-button>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <el-pagination style=\"text-align:center; margin-top: 10px\"\r\n                   @size-change=\"handleSizeChange\"\r\n                   @current-change=\"handleCurrentChange\"\r\n                   :current-page=\"pageNum\"\r\n                   :page-sizes=\"[10, 20, 50, 100]\"\r\n                   :page-size=\"pageSize\"\r\n                   layout=\"total, sizes, prev, pager, next, jumper\"\r\n                   :total=\"total\">\r\n    </el-pagination>\r\n    <el-dialog\r\n        title=\"提示\"\r\n        :visible.sync=\"centerDialogVisible\"\r\n        width=\"30%\"\r\n        center>\r\n      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"80px\">\r\n        <el-form-item label=\"订单号\" prop=\"no\">\r\n          <el-col :span=\"18\">\r\n            <el-input v-model=\"form.no\"></el-input>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"仓库\" prop=\"storage\">\r\n          <el-col :span=\"18\">\r\n            <el-select v-model=\"form.storage\" placeholder=\"请选择仓库\" style=\"width: 100%\" @change=\"onGoodOrStorageChange\">\r\n              <el-option\r\n                  v-for=\"item in storageData\"\r\n                  :key=\"item.id\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.id\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"商品\" prop=\"good\">\r\n          <el-col :span=\"18\">\r\n            <div style=\"position: relative;\">\r\n              <el-input \r\n                v-model=\"form.good\" \r\n                placeholder=\"请输入商品名\" \r\n                @input=\"onGoodInput\"\r\n                @focus=\"onGoodFocus\"\r\n                @blur=\"hideSuggestions\"\r\n                ref=\"goodsInput\">\r\n              </el-input>\r\n              \r\n              <!-- 商品名建议列表 -->\r\n              <div \r\n                v-if=\"showSuggestions && goodsNameSuggestions.length > 0\" \r\n                class=\"goods-suggestions\"\r\n                style=\"position: absolute; top: 100%; left: 0; right: 0; z-index: 1000; background: white; border: 1px solid #dcdfe6; border-radius: 4px; box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1); max-height: 200px; overflow-y: auto;\">\r\n                \r\n                <div v-if=\"suggestionLoading\" style=\"padding: 10px; text-align: center; color: #999;\">\r\n                  <i class=\"el-icon-loading\"></i> 搜索中...\r\n                </div>\r\n                \r\n                <div \r\n                  v-for=\"(suggestion, index) in goodsNameSuggestions\" \r\n                  :key=\"index\"\r\n                  @click=\"selectGoodsName(suggestion)\"\r\n                  style=\"padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f5f5f5;\"\r\n                  :style=\"{ backgroundColor: index % 2 === 0 ? '#fafafa' : 'white' }\"\r\n                  @mouseenter=\"$event.target.style.backgroundColor = '#e6f7ff'\"\r\n                  @mouseleave=\"$event.target.style.backgroundColor = index % 2 === 0 ? '#fafafa' : 'white'\">\r\n                  <i class=\"el-icon-goods\" style=\"margin-right: 8px; color: #409eff;\"></i>\r\n                  {{ suggestion }}\r\n                </div>\r\n                \r\n                <div v-if=\"!suggestionLoading && goodsNameSuggestions.length === 0\" style=\"padding: 10px; text-align: center; color: #999;\">\r\n                  没有找到相关商品\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"商品类型\" prop=\"goodstype\">\r\n          <el-col :span=\"18\">\r\n            <el-select \r\n              v-model=\"form.goodstype\" \r\n              placeholder=\"请选择商品类型\" \r\n              style=\"width: 100%\"\r\n              @focus=\"onGoodsNameChange\"\r\n              @change=\"onGoodOrStorageChange\">\r\n              <el-option\r\n                  v-for=\"(item, index) in filteredGoodstypeData\"\r\n                  :key=\"item.id\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.id\"\r\n                  :class=\"{ 'suggested-type': isSuggestedType(item.name) }\"\r\n                  :style=\"{ \r\n                    backgroundColor: isSuggestedType(item.name) ? '#e6f7ff' : 'white',\r\n                    color: isSuggestedType(item.name) ? '#409eff' : 'inherit',\r\n                    fontWeight: isSuggestedType(item.name) ? 'bold' : 'normal'\r\n                  }\">\r\n                <span v-if=\"isSuggestedType(item.name)\" style=\"color: #409eff;\">\r\n                  <i class=\"el-icon-star-on\" style=\"margin-right: 5px;\"></i>\r\n                  {{ item.name }}\r\n                  <el-tag size=\"mini\" type=\"success\" style=\"margin-left: 8px;\">推荐</el-tag>\r\n                </span>\r\n                <span v-else>{{ item.name }}</span>\r\n              </el-option>\r\n            </el-select>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"操作类型\" prop=\"type\">\r\n          <el-col :span=\"18\">\r\n            <el-radio-group v-model=\"form.type\">\r\n              <el-radio label=\"0\">入库操作</el-radio>\r\n              <el-radio label=\"1\">出库操作</el-radio>\r\n            </el-radio-group>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"操作数量\" prop=\"count\">\r\n          <el-col :span=\"18\">\r\n            <el-input v-model=\"form.count\"></el-input>\r\n          </el-col>\r\n        </el-form-item>\r\n        <!-- 当前库存显示 -->\r\n        <el-form-item label=\"当前库存\" v-if=\"form.good && form.storage\">\r\n          <el-col :span=\"18\">\r\n            <div style=\"display: flex; align-items: center;\">\r\n              <el-tag \r\n                :type=\"currentStock > 0 ? 'success' : (currentStock === 0 ? 'info' : 'danger')\"\r\n                v-if=\"!checkingStock\">\r\n                {{ currentStock }}\r\n              </el-tag>\r\n              <span v-else style=\"color: #999;\">\r\n                <i class=\"el-icon-loading\"></i> 检查中...\r\n              </span>\r\n              <span style=\"margin-left: 10px; color: #666; font-size: 12px;\">\r\n                ({{ form.good }} 在 {{ getStorageName(form.storage) }} 的库存)\r\n              </span>\r\n            </div>\r\n          </el-col>\r\n        </el-form-item>\r\n        <!-- 出库警告 -->\r\n        <el-form-item v-if=\"form.type === '1' && form.count && currentStock > 0\">\r\n          <el-col :span=\"18\">\r\n            <el-alert\r\n              :title=\"parseInt(form.count) > currentStock ? '库存不足警告' : '出库确认'\"\r\n              :type=\"parseInt(form.count) > currentStock ? 'error' : 'warning'\"\r\n              :description=\"parseInt(form.count) > currentStock ? \r\n                `当前库存：${currentStock}，请求出库：${form.count}，超出：${parseInt(form.count) - currentStock}` :\r\n                `当前库存：${currentStock}，出库后剩余：${currentStock - parseInt(form.count)}`\"\r\n              show-icon\r\n              :closable=\"false\">\r\n            </el-alert>\r\n          </el-col>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"centerDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveData\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.goods-suggestions {\r\n  animation: fadeIn 0.2s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-5px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.goods-suggestions div:hover {\r\n  background-color: #e6f7ff !important;\r\n  color: #409eff;\r\n}\r\n\r\n.goods-suggestions div:last-child {\r\n  border-bottom: none;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}