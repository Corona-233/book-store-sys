{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL, TIMEOUT } from './constants';\nimport { Message } from 'element-ui';\n\n// 创建 axios 实例\nconst request = axios.create({\n  baseURL: BASE_URL,\n  timeout: TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  }\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 可以在这里添加 token 等认证信息\n  // const token = sessionStorage.getItem('token')\n  // if (token) {\n  //   config.headers.Authorization = `Bearer ${token}`\n  // }\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  // 直接返回响应数据，保持与现有代码兼容\n  return response.data;\n}, error => {\n  console.error('响应错误:', error);\n\n  // 统一错误处理\n  let message = '请求失败';\n  if (error.response) {\n    switch (error.response.status) {\n      case 400:\n        message = '请求参数错误';\n        break;\n      case 401:\n        message = '未授权，请重新登录';\n        break;\n      case 403:\n        message = '拒绝访问';\n        break;\n      case 404:\n        message = '请求地址出错';\n        break;\n      case 500:\n        message = '服务器内部错误';\n        break;\n      default:\n        message = `连接错误${error.response.status}`;\n    }\n  } else if (error.code === 'ECONNABORTED') {\n    message = '请求超时';\n  } else if (error.message === 'Network Error') {\n    message = '网络连接异常';\n  }\n  Message.error(message);\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","BASE_URL","TIMEOUT","Message","request","create","baseURL","timeout","headers","interceptors","use","config","error","console","Promise","reject","response","data","message","status","code"],"sources":["D:/Git/book-store-sys/Proj/front/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { BASE_URL, TIMEOUT } from './constants'\r\nimport { Message } from 'element-ui'\r\n\r\n// 创建 axios 实例\r\nconst request = axios.create({\r\n  baseURL: BASE_URL,\r\n  timeout: TIMEOUT,\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n  config => {\r\n    // 可以在这里添加 token 等认证信息\r\n    // const token = sessionStorage.getItem('token')\r\n    // if (token) {\r\n    //   config.headers.Authorization = `Bearer ${token}`\r\n    // }\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求错误:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nrequest.interceptors.response.use(\r\n  response => {\r\n    // 直接返回响应数据，保持与现有代码兼容\r\n    return response.data\r\n  },\r\n  error => {\r\n    console.error('响应错误:', error)\r\n    \r\n    // 统一错误处理\r\n    let message = '请求失败'\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 400:\r\n          message = '请求参数错误'\r\n          break\r\n        case 401:\r\n          message = '未授权，请重新登录'\r\n          break\r\n        case 403:\r\n          message = '拒绝访问'\r\n          break\r\n        case 404:\r\n          message = '请求地址出错'\r\n          break\r\n        case 500:\r\n          message = '服务器内部错误'\r\n          break\r\n        default:\r\n          message = `连接错误${error.response.status}`\r\n      }\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      message = '请求超时'\r\n    } else if (error.message === 'Network Error') {\r\n      message = '网络连接异常'\r\n    }\r\n    \r\n    Message.error(message)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default request\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,OAAO,QAAQ,aAAa;AAC/C,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAEL,QAAQ;EACjBM,OAAO,EAAEL,OAAO;EAChBM,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA;EACA;EACA;EACA;EACA,OAAOA,MAAM;AACf,CAAC,EACDC,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAR,OAAO,CAACK,YAAY,CAACO,QAAQ,CAACN,GAAG,CAC/BM,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACDL,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;;EAE7B;EACA,IAAIM,OAAO,GAAG,MAAM;EACpB,IAAIN,KAAK,CAACI,QAAQ,EAAE;IAClB,QAAQJ,KAAK,CAACI,QAAQ,CAACG,MAAM;MAC3B,KAAK,GAAG;QACND,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,WAAW;QACrB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,MAAM;QAChB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,SAAS;QACnB;MACF;QACEA,OAAO,GAAI,OAAMN,KAAK,CAACI,QAAQ,CAACG,MAAO,EAAC;IAC5C;EACF,CAAC,MAAM,IAAIP,KAAK,CAACQ,IAAI,KAAK,cAAc,EAAE;IACxCF,OAAO,GAAG,MAAM;EAClB,CAAC,MAAM,IAAIN,KAAK,CAACM,OAAO,KAAK,eAAe,EAAE;IAC5CA,OAAO,GAAG,QAAQ;EACpB;EAEAf,OAAO,CAACS,KAAK,CAACM,OAAO,CAAC;EACtB,OAAOJ,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}