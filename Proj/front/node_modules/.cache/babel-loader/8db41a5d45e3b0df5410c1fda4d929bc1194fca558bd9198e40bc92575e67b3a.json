{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { storageApi } from '@/api/storage';\nimport { goodsApi } from '@/api/goods';\nimport { operationApi } from '@/api/operation';\nexport default {\n  name: \"StorageManage\",\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      name: '',\n      centerDialogVisible: false,\n      form: {\n        id: '',\n        name: '',\n        remark: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入仓库名',\n          trigger: 'blur'\n        }]\n      },\n      // 查看仓库物品相关数据\n      viewDialogVisible: false,\n      currentStorage: null,\n      goodsInStorage: [],\n      goodsPageNum: 1,\n      goodsPageSize: 10,\n      goodsTotal: 0,\n      goodsSearchName: '',\n      goodstypeData: [],\n      loadingGoods: false\n    };\n  },\n  methods: {\n    handleSizeChange(val) {\n      console.log(`每页 ${val} 条`);\n      this.pageNum = 1;\n      this.pageSize = val;\n      this.loadPost();\n    },\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`);\n      this.pageNum = val;\n      this.loadPost();\n    },\n    loadPost() {\n      storageApi.listPage({\n        pageSize: this.pageSize,\n        pageNum: this.pageNum,\n        param: {\n          name: this.name\n        }\n      }).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.tableData = res.data;\n          this.total = res.total;\n        } else {\n          alert('获取数据失败');\n        }\n      });\n    },\n    resetParam() {\n      this.name = '';\n    },\n    addData() {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.resetForm();\n      });\n      this.form.id = '';\n    },\n    saveData() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.form.id) {\n            this.doMod();\n          } else {\n            this.doSave();\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    mod(row) {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.form.id = row.id;\n        this.form.name = row.name;\n        this.form.remark = row.remark;\n      });\n    },\n    doMod() {\n      storageApi.update(this.form).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '修改成功！',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: '修改失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    doSave() {\n      storageApi.save(this.form).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '添加成功！',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: '添加失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    del(id) {\n      storageApi.delete(id).then(res => {\n        if (res.code == 200) {\n          this.$message({\n            message: '删除成功！',\n            type: 'success'\n          });\n          this.loadPost();\n        } else {\n          this.$message({\n            message: '删除失败！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n    },\n    // 查看仓库物品\n    viewStorage(row) {\n      console.log('查看仓库:', row);\n      this.currentStorage = row;\n      this.viewDialogVisible = true;\n      this.goodsSearchName = '';\n      this.goodsPageNum = 1;\n      this.goodsPageSize = 10;\n      this.goodsTotal = 0;\n      this.goodsInStorage = [];\n      this.loadGoodsInStorage();\n    },\n    // 加载仓库中的物品\n    loadGoodsInStorage() {\n      if (!this.currentStorage || !this.currentStorage.id) {\n        this.$message({\n          message: '仓库信息错误',\n          type: 'error'\n        });\n        return;\n      }\n      this.loadingGoods = true;\n      goodsApi.listPage({\n        pageSize: this.goodsPageSize,\n        pageNum: this.goodsPageNum,\n        param: {\n          name: this.goodsSearchName || '',\n          storage: this.currentStorage.id + ''\n        }\n      }).then(res => {\n        console.log('仓库物品查询结果:', res);\n        if (res.code == 200) {\n          this.goodsInStorage = res.data;\n          this.goodsTotal = res.total;\n          // 为每个商品计算实际库存\n          this.calculateStockForGoods();\n        } else {\n          this.$message({\n            message: '获取仓库物品失败: ' + (res.msg || '未知错误'),\n            type: 'error'\n          });\n          this.loadingGoods = false;\n        }\n      }).catch(error => {\n        console.error('API调用错误:', error);\n        this.$message({\n          message: '网络请求失败: ' + error.message,\n          type: 'error'\n        });\n        this.loadingGoods = false;\n      });\n    },\n    // 物品分页处理\n    handleGoodsSizeChange(val) {\n      this.goodsPageNum = 1;\n      this.goodsPageSize = val;\n      this.loadGoodsInStorage();\n    },\n    handleGoodsCurrentChange(val) {\n      this.goodsPageNum = val;\n      this.loadGoodsInStorage();\n    },\n    // 搜索仓库物品\n    searchGoods() {\n      this.goodsPageNum = 1;\n      this.loadGoodsInStorage();\n    },\n    // 重置物品搜索\n    resetGoodsSearch() {\n      this.goodsSearchName = '';\n      this.goodsPageNum = 1;\n      this.loadGoodsInStorage();\n    },\n    // 格式化商品类型\n    formatGoodsType(row) {\n      let t = this.goodstypeData.find(item => {\n        return item.id == row.goodstype;\n      });\n      return t && t.name;\n    },\n    // 加载商品类型列表\n    loadGoodstype() {\n      goodsApi.getGoodsTypeList().then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.goodstypeData = res.data;\n        } else {\n          console.log('获取商品类型数据失败');\n        }\n      });\n    },\n    // 为商品计算实际库存\n    calculateStockForGoods() {\n      if (!this.goodsInStorage || this.goodsInStorage.length === 0) {\n        this.loadingGoods = false;\n        return;\n      }\n\n      // 为每个商品计算库存\n      const promises = this.goodsInStorage.map(goods => {\n        return this.calculateActualStock(goods.id, goods.name).then(stockResult => {\n          goods.actualStock = stockResult.actualStock;\n          goods.hasNegativeStock = stockResult.hasNegativeStock;\n          goods.negativeStockOperations = stockResult.negativeStockOperations;\n          return goods;\n        });\n      });\n      Promise.all(promises).then(() => {\n        this.loadingGoods = false;\n        console.log('库存计算完成:', this.goodsInStorage);\n      }).catch(error => {\n        console.error('计算库存失败:', error);\n        this.loadingGoods = false;\n        this.$message({\n          message: '计算库存失败',\n          type: 'warning'\n        });\n      });\n    },\n    // 计算单个商品的实际库存\n    calculateActualStock(goodsId, goodsName) {\n      return new Promise((resolve, reject) => {\n        // 获取该商品的所有操作记录\n        operationApi.listPage({\n          pageSize: 1000,\n          // 获取所有记录\n          pageNum: 1,\n          param: {\n            good: goodsName,\n            // 根据商品名称查询\n            storage: this.currentStorage.id + ''\n          }\n        }).then(res => {\n          if (res.code == 200) {\n            const operations = res.data || [];\n\n            // 找到当前商品，获取其初始数量\n            const currentGoods = this.goodsInStorage.find(g => g.id === goodsId);\n            const initialStock = currentGoods ? currentGoods.count || 0 : 0;\n            let actualStock = initialStock; // 从初始库存开始计算\n            let hasNegativeStock = false;\n            let negativeStockOperations = [];\n\n            // 按时间顺序计算库存，检测负库存操作\n            operations.sort((a, b) => new Date(a.createTime || 0) - new Date(b.createTime || 0));\n            operations.forEach((operation, index) => {\n              const beforeStock = actualStock;\n              if (operation.type === '0') {\n                // 入库操作\n                actualStock += operation.count;\n              } else if (operation.type === '1') {\n                // 出库操作 - 检查库存是否足够\n                if (actualStock < operation.count) {\n                  hasNegativeStock = true;\n                  negativeStockOperations.push({\n                    operation: operation,\n                    beforeStock: beforeStock,\n                    requestedCount: operation.count,\n                    shortage: operation.count - beforeStock\n                  });\n                }\n                actualStock -= operation.count;\n              }\n            });\n            const result = {\n              actualStock: actualStock,\n              hasNegativeStock: hasNegativeStock,\n              negativeStockOperations: negativeStockOperations\n            };\n            console.log(`商品 ${goodsName} 的实际库存: ${actualStock}`, result);\n            resolve(result);\n          } else {\n            console.log(`获取商品 ${goodsName} 操作记录失败`);\n            // 如果无法获取操作记录，至少显示初始库存\n            const currentGoods = this.goodsInStorage.find(g => g.id === goodsId);\n            const initialStock = currentGoods ? currentGoods.count || 0 : 0;\n            resolve({\n              actualStock: initialStock,\n              hasNegativeStock: false,\n              negativeStockOperations: []\n            });\n          }\n        }).catch(error => {\n          console.error(`计算商品 ${goodsName} 库存失败:`, error);\n          resolve({\n            actualStock: 0,\n            hasNegativeStock: false,\n            negativeStockOperations: []\n          });\n        });\n      });\n    }\n  },\n  computed: {\n    // 检查是否有任何商品存在负库存异常\n    hasAnyNegativeStock() {\n      return this.goodsInStorage.some(goods => goods.hasNegativeStock);\n    }\n  },\n  beforeMount() {\n    this.loadPost();\n    this.loadGoodstype();\n  }\n};","map":{"version":3,"names":["storageApi","goodsApi","operationApi","name","data","tableData","pageNum","pageSize","total","centerDialogVisible","form","id","remark","rules","required","message","trigger","viewDialogVisible","currentStorage","goodsInStorage","goodsPageNum","goodsPageSize","goodsTotal","goodsSearchName","goodstypeData","loadingGoods","methods","handleSizeChange","val","console","log","loadPost","handleCurrentChange","listPage","param","then","res","code","alert","resetParam","addData","$nextTick","resetForm","saveData","$refs","validate","valid","doMod","doSave","mod","row","update","$message","type","save","del","delete","resetFields","viewStorage","loadGoodsInStorage","storage","calculateStockForGoods","msg","catch","error","handleGoodsSizeChange","handleGoodsCurrentChange","searchGoods","resetGoodsSearch","formatGoodsType","t","find","item","goodstype","loadGoodstype","getGoodsTypeList","length","promises","map","goods","calculateActualStock","stockResult","actualStock","hasNegativeStock","negativeStockOperations","Promise","all","goodsId","goodsName","resolve","reject","good","operations","currentGoods","g","initialStock","count","sort","a","b","Date","createTime","forEach","operation","index","beforeStock","push","requestedCount","shortage","result","computed","hasAnyNegativeStock","some","beforeMount"],"sources":["src/components/storage/StorageManage.vue"],"sourcesContent":["<script>\r\nimport { storageApi } from '@/api/storage'\r\nimport { goodsApi } from '@/api/goods'\r\nimport { operationApi } from '@/api/operation'\r\n\r\nexport default {\r\n  name: \"StorageManage\",\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      pageNum: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n      name: '',\r\n      centerDialogVisible: false,\r\n      form: {\r\n        id: '',\r\n        name: '',\r\n        remark: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n          {required: true, message: '请输入仓库名', trigger: 'blur'}\r\n        ],\r\n      },\r\n      // 查看仓库物品相关数据\r\n      viewDialogVisible: false,\r\n      currentStorage: null,\r\n      goodsInStorage: [],\r\n      goodsPageNum: 1,\r\n      goodsPageSize: 10,\r\n      goodsTotal: 0,\r\n      goodsSearchName: '',\r\n      goodstypeData: [],\r\n      loadingGoods: false\r\n    }\r\n  },\r\n  methods:{\r\n    handleSizeChange(val) {\r\n      console.log(`每页 ${val} 条`);\r\n      this.pageNum = 1\r\n      this.pageSize = val\r\n      this.loadPost()\r\n    },\r\n    handleCurrentChange(val) {\r\n      console.log(`当前页: ${val}`);\r\n      this.pageNum = val\r\n      this.loadPost()\r\n    },\r\n    loadPost(){\r\n      storageApi.listPage({\r\n        pageSize: this.pageSize,\r\n        pageNum: this.pageNum,\r\n        param: {\r\n          name: this.name,\r\n        }\r\n      }).then(res=>{\r\n        console.log(res)\r\n        if(res.code==200){\r\n          this.tableData=res.data\r\n          this.total=res.total\r\n        }else{\r\n          alert('获取数据失败')\r\n        }\r\n      })\r\n    },\r\n    resetParam(){\r\n      this.name = ''\r\n\r\n    },\r\n    addData(){\r\n      this.centerDialogVisible = true\r\n      this.$nextTick(()=>{this.resetForm()})\r\n      this.form.id = ''\r\n    },\r\n    saveData(){\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          if(this.form.id){\r\n            this.doMod();\r\n          }else{\r\n            this.doSave();\r\n          }\r\n        } else {\r\n          console.log('error submit!!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    mod(row){\r\n      this.centerDialogVisible = true\r\n      this.$nextTick(()=>{\r\n        this.form.id = row.id\r\n        this.form.name = row.name\r\n        this.form.remark = row.remark\r\n      })\r\n\r\n    },\r\n    doMod(){\r\n      storageApi.update(this.form).then(res=>{\r\n        if(res.code==200){\r\n          this.$message({\r\n            message: '修改成功！',\r\n            type: 'success'\r\n          });\r\n          this.centerDialogVisible = false\r\n          this.loadPost()\r\n          this.resetForm()\r\n        }else{\r\n          this.$message({\r\n            message: '修改失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    doSave(){\r\n      storageApi.save(this.form).then(res=>{\r\n        if(res.code==200){\r\n          this.$message({\r\n            message: '添加成功！',\r\n            type: 'success'\r\n          });\r\n          this.centerDialogVisible = false\r\n          this.loadPost()\r\n          this.resetForm()\r\n        }else{\r\n          this.$message({\r\n            message: '添加失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    del(id){\r\n      storageApi.delete(id).then(res=>{\r\n        if(res.code==200){\r\n          this.$message({\r\n            message: '删除成功！',\r\n            type: 'success'\r\n          });\r\n          this.loadPost()\r\n        }else{\r\n          this.$message({\r\n            message: '删除失败！',\r\n            type: 'error'\r\n          });\r\n        }\r\n      })\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.resetFields();\r\n    },\r\n    // 查看仓库物品\r\n    viewStorage(row) {\r\n      console.log('查看仓库:', row);\r\n      this.currentStorage = row;\r\n      this.viewDialogVisible = true;\r\n      this.goodsSearchName = '';\r\n      this.goodsPageNum = 1;\r\n      this.goodsPageSize = 10;\r\n      this.goodsTotal = 0;\r\n      this.goodsInStorage = [];\r\n      this.loadGoodsInStorage();\r\n    },\r\n    // 加载仓库中的物品\r\n    loadGoodsInStorage() {\r\n      if (!this.currentStorage || !this.currentStorage.id) {\r\n        this.$message({\r\n          message: '仓库信息错误',\r\n          type: 'error'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      this.loadingGoods = true;\r\n      \r\n      goodsApi.listPage({\r\n        pageSize: this.goodsPageSize,\r\n        pageNum: this.goodsPageNum,\r\n        param: {\r\n          name: this.goodsSearchName || '',\r\n          storage: this.currentStorage.id + ''\r\n        }\r\n      }).then(res => {\r\n        console.log('仓库物品查询结果:', res);\r\n        if (res.code == 200) {\r\n          this.goodsInStorage = res.data;\r\n          this.goodsTotal = res.total;\r\n          // 为每个商品计算实际库存\r\n          this.calculateStockForGoods();\r\n        } else {\r\n          this.$message({\r\n            message: '获取仓库物品失败: ' + (res.msg || '未知错误'),\r\n            type: 'error'\r\n          });\r\n          this.loadingGoods = false;\r\n        }\r\n      }).catch(error => {\r\n        console.error('API调用错误:', error);\r\n        this.$message({\r\n          message: '网络请求失败: ' + error.message,\r\n          type: 'error'\r\n        });\r\n        this.loadingGoods = false;\r\n      });\r\n    },\r\n    // 物品分页处理\r\n    handleGoodsSizeChange(val) {\r\n      this.goodsPageNum = 1;\r\n      this.goodsPageSize = val;\r\n      this.loadGoodsInStorage();\r\n    },\r\n    handleGoodsCurrentChange(val) {\r\n      this.goodsPageNum = val;\r\n      this.loadGoodsInStorage();\r\n    },\r\n    // 搜索仓库物品\r\n    searchGoods() {\r\n      this.goodsPageNum = 1;\r\n      this.loadGoodsInStorage();\r\n    },\r\n    // 重置物品搜索\r\n    resetGoodsSearch() {\r\n      this.goodsSearchName = '';\r\n      this.goodsPageNum = 1;\r\n      this.loadGoodsInStorage();\r\n    },\r\n    // 格式化商品类型\r\n    formatGoodsType(row) {\r\n      let t = this.goodstypeData.find(item => {\r\n        return item.id == row.goodstype;\r\n      });\r\n      return t && t.name;\r\n    },\r\n    // 加载商品类型列表\r\n    loadGoodstype() {\r\n      goodsApi.getGoodsTypeList().then(res => {\r\n        console.log(res);\r\n        if (res.code == 200) {\r\n          this.goodstypeData = res.data;\r\n        } else {\r\n          console.log('获取商品类型数据失败');\r\n        }\r\n      });\r\n    },\r\n    // 为商品计算实际库存\r\n    calculateStockForGoods() {\r\n      if (!this.goodsInStorage || this.goodsInStorage.length === 0) {\r\n        this.loadingGoods = false;\r\n        return;\r\n      }\r\n      \r\n      // 为每个商品计算库存\r\n      const promises = this.goodsInStorage.map(goods => {\r\n        return this.calculateActualStock(goods.id, goods.name).then(stockResult => {\r\n          goods.actualStock = stockResult.actualStock;\r\n          goods.hasNegativeStock = stockResult.hasNegativeStock;\r\n          goods.negativeStockOperations = stockResult.negativeStockOperations;\r\n          return goods;\r\n        });\r\n      });\r\n      \r\n      Promise.all(promises).then(() => {\r\n        this.loadingGoods = false;\r\n        console.log('库存计算完成:', this.goodsInStorage);\r\n      }).catch(error => {\r\n        console.error('计算库存失败:', error);\r\n        this.loadingGoods = false;\r\n        this.$message({\r\n          message: '计算库存失败',\r\n          type: 'warning'\r\n        });\r\n      });\r\n    },\r\n    // 计算单个商品的实际库存\r\n    calculateActualStock(goodsId, goodsName) {\r\n      return new Promise((resolve, reject) => {\r\n        // 获取该商品的所有操作记录\r\n        operationApi.listPage({\r\n          pageSize: 1000, // 获取所有记录\r\n          pageNum: 1,\r\n          param: {\r\n            good: goodsName, // 根据商品名称查询\r\n            storage: this.currentStorage.id + ''\r\n          }\r\n        }).then(res => {\r\n          if (res.code == 200) {\r\n            const operations = res.data || [];\r\n            \r\n            // 找到当前商品，获取其初始数量\r\n            const currentGoods = this.goodsInStorage.find(g => g.id === goodsId);\r\n            const initialStock = currentGoods ? (currentGoods.count || 0) : 0;\r\n            \r\n            let actualStock = initialStock; // 从初始库存开始计算\r\n            let hasNegativeStock = false;\r\n            let negativeStockOperations = [];\r\n            \r\n            // 按时间顺序计算库存，检测负库存操作\r\n            operations.sort((a, b) => new Date(a.createTime || 0) - new Date(b.createTime || 0));\r\n            \r\n            operations.forEach((operation, index) => {\r\n              const beforeStock = actualStock;\r\n              \r\n              if (operation.type === '0') {\r\n                // 入库操作\r\n                actualStock += operation.count;\r\n              } else if (operation.type === '1') {\r\n                // 出库操作 - 检查库存是否足够\r\n                if (actualStock < operation.count) {\r\n                  hasNegativeStock = true;\r\n                  negativeStockOperations.push({\r\n                    operation: operation,\r\n                    beforeStock: beforeStock,\r\n                    requestedCount: operation.count,\r\n                    shortage: operation.count - beforeStock\r\n                  });\r\n                }\r\n                actualStock -= operation.count;\r\n              }\r\n            });\r\n            \r\n            const result = {\r\n              actualStock: actualStock,\r\n              hasNegativeStock: hasNegativeStock,\r\n              negativeStockOperations: negativeStockOperations\r\n            };\r\n            \r\n            console.log(`商品 ${goodsName} 的实际库存: ${actualStock}`, result);\r\n            resolve(result);\r\n          } else {\r\n            console.log(`获取商品 ${goodsName} 操作记录失败`);\r\n            // 如果无法获取操作记录，至少显示初始库存\r\n            const currentGoods = this.goodsInStorage.find(g => g.id === goodsId);\r\n            const initialStock = currentGoods ? (currentGoods.count || 0) : 0;\r\n            resolve({\r\n              actualStock: initialStock,\r\n              hasNegativeStock: false,\r\n              negativeStockOperations: []\r\n            });\r\n          }\r\n        }).catch(error => {\r\n          console.error(`计算商品 ${goodsName} 库存失败:`, error);\r\n          resolve({\r\n            actualStock: 0,\r\n            hasNegativeStock: false,\r\n            negativeStockOperations: []\r\n          });\r\n        });\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    // 检查是否有任何商品存在负库存异常\r\n    hasAnyNegativeStock() {\r\n      return this.goodsInStorage.some(goods => goods.hasNegativeStock);\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.loadPost();\r\n    this.loadGoodstype();\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div style=\"text-align: center; margin-bottom: 5px\">\r\n      <el-input v-model=\"name\"\r\n                placeholder=\"请输入仓库名\"\r\n                suffix-icon=\"el-icon-search\"\r\n                style=\"width: 200px\"\r\n                @keyup.enter.native=\"loadPost\"></el-input>\r\n      <el-button style=\"margin-left: 10px\" @click=\"loadPost\">查询</el-button>\r\n      <el-button @click=\"resetParam\">重置</el-button>\r\n      <el-button style=\"margin-left: 10px\" @click=\"addData\">新增</el-button>\r\n    </div>\r\n    <el-table :data=\"tableData\"\r\n              :header-cell-style=\"{background:'rgb(186,204,238)',color:'rgba(0,0,0,0.6)'}\"\r\n              border\r\n    >\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"100\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"name\" label=\"仓库名\" width=\"300\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"remark\" label=\"备注\">\r\n      </el-table-column>\r\n\r\n      <el-table-column prop=\"operate\" label=\"操作\" width=\"280\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"small\" type=\"info\" @click=\"viewStorage(scope.row)\">查看</el-button>\r\n          <el-button size=\"small\" type=\"primary\" @click=\"mod(scope.row)\" style=\"margin-left: 10px\">编辑</el-button>\r\n          <el-popconfirm\r\n              title=\"您确定删除该条数据吗？\"\r\n              @confirm=\"del(scope.row.id)\"\r\n              style=\"margin-left: 10px\"\r\n          >\r\n            <el-button slot=\"reference\" size=\"small\" type=\"danger\">删除</el-button>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <el-pagination style=\"text-align:center; margin-top: 10px\"\r\n                   @size-change=\"handleSizeChange\"\r\n                   @current-change=\"handleCurrentChange\"\r\n                   :current-page=\"pageNum\"\r\n                   :page-sizes=\"[10, 20, 50, 100]\"\r\n                   :page-size=\"pageSize\"\r\n                   layout=\"total, sizes, prev, pager, next, jumper\"\r\n                   :total=\"total\">\r\n    </el-pagination>\r\n    <el-dialog\r\n        title=\"提示\"\r\n        :visible.sync=\"centerDialogVisible\"\r\n        width=\"30%\"\r\n        center>\r\n      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"80px\">\r\n        <el-form-item label=\"仓库名\" prop=\"name\">\r\n          <el-col :span=\"18\">\r\n            <el-input v-model=\"form.name\"></el-input>\r\n          </el-col>\r\n        </el-form-item>\r\n        <el-form-item label=\"备注\" prop=\"remark\">\r\n          <el-col :span=\"18\">\r\n            <el-input v-model=\"form.remark\" type=\"textarea\"></el-input>\r\n          </el-col>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"centerDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveData\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <!-- 查看仓库物品浮窗 -->\r\n    <el-dialog\r\n        :title=\"'仓库物品 - ' + (currentStorage ? currentStorage.name : '')\"\r\n        :visible.sync=\"viewDialogVisible\"\r\n        width=\"80%\"\r\n        center>\r\n      <div style=\"margin-bottom: 15px;\">\r\n        <el-input v-model=\"goodsSearchName\"\r\n                  placeholder=\"请输入物品名称\"\r\n                  suffix-icon=\"el-icon-search\"\r\n                  style=\"width: 200px; margin-right: 10px;\"\r\n                  @keyup.enter.native=\"searchGoods\"></el-input>\r\n        <el-button @click=\"searchGoods\" type=\"primary\">查询</el-button>\r\n        <el-button @click=\"resetGoodsSearch\">重置</el-button>\r\n      </div>\r\n      \r\n      <el-table :data=\"goodsInStorage\"\r\n                :header-cell-style=\"{background:'rgb(186,204,238)',color:'rgba(0,0,0,0.6)'}\"\r\n                border\r\n                style=\"width: 100%\"\r\n                v-loading=\"loadingGoods\"\r\n                element-loading-text=\"正在计算库存...\">\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"name\" label=\"物品名称\" min-width=\"150\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"goodstype\" label=\"物品类型\" min-width=\"120\" :formatter=\"formatGoodsType\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"count\" label=\"初始数量\" min-width=\"100\">\r\n        </el-table-column>\r\n        <el-table-column label=\"实际库存\" min-width=\"150\">\r\n          <template slot-scope=\"scope\">\r\n            <div v-if=\"scope.row.actualStock !== undefined\">\r\n              <el-tag \r\n                :type=\"scope.row.actualStock > 0 ? 'success' : (scope.row.actualStock === 0 ? 'info' : 'danger')\"\r\n                style=\"margin-right: 5px;\">\r\n                {{ scope.row.actualStock }}\r\n              </el-tag>\r\n              <el-tooltip \r\n                v-if=\"scope.row.hasNegativeStock\" \r\n                :content=\"`存在 ${scope.row.negativeStockOperations.length} 次超量出库操作`\"\r\n                placement=\"top\">\r\n                <el-tag type=\"warning\" size=\"mini\">\r\n                  <i class=\"el-icon-warning\"></i> 异常\r\n                </el-tag>\r\n              </el-tooltip>\r\n            </div>\r\n            <span v-else style=\"color: #999;\">计算中...</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"remark\" label=\"备注\" min-width=\"200\">\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- 异常操作详情 -->\r\n      <div v-if=\"hasAnyNegativeStock\" style=\"margin-top: 15px; padding: 10px; background-color: #fef0f0; border: 1px solid #fbc4c4; border-radius: 4px;\">\r\n        <h4 style=\"color: #f56c6c; margin: 0 0 10px 0;\">\r\n          <i class=\"el-icon-warning\"></i> 库存异常警告\r\n        </h4>\r\n        <div v-for=\"goods in goodsInStorage\" :key=\"goods.id\" v-if=\"goods.hasNegativeStock\">\r\n          <div style=\"margin-bottom: 8px;\">\r\n            <strong style=\"color: #f56c6c;\">{{ goods.name }}</strong> - 存在超量出库操作：\r\n            <ul style=\"margin: 5px 0 0 20px; color: #666;\">\r\n              <li v-for=\"(negOp, index) in goods.negativeStockOperations\" :key=\"index\">\r\n                订单号: {{ negOp.operation.no }} - \r\n                出库 {{ negOp.requestedCount }} 件，但当时库存只有 {{ negOp.beforeStock }} 件\r\n                <span style=\"color: #f56c6c;\">(超量 {{ negOp.shortage }} 件)</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <el-pagination style=\"text-align:center; margin-top: 10px\"\r\n                     @size-change=\"handleGoodsSizeChange\"\r\n                     @current-change=\"handleGoodsCurrentChange\"\r\n                     :current-page=\"goodsPageNum\"\r\n                     :page-sizes=\"[10, 20, 50, 100]\"\r\n                     :page-size=\"goodsPageSize\"\r\n                     layout=\"total, sizes, prev, pager, next, jumper\"\r\n                     :total=\"goodsTotal\">\r\n      </el-pagination>\r\n      \r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"viewDialogVisible = false\">关 闭</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}